% This will be exactly like Week10_DMD.m

% Declare the X1 and X2 variables from the variable data
% Take the SVD of X1
% Compute the S tilde matrix 
% Save S tilde as the variable A1

load('CP5_data.mat')

X1 = data(:,1:end-1);
X2 = data(:,2:end);

[U,S,V] = svd(X1, 'econ');

sTilde = U' * X2 * V * pinv(S);

A1 = sTilde; % Shape: 675x675 double

% Solve the eigenvalue problem for S tilde
% Calculate dt based on the frame rate
% Convert eigenvalues from mu to omega
% This is where things will slightly deviate from Week10_DMD.  We need to
% pick the eigenvector associated with the smallest (in modulus)
% eigenvalue and reconstruct the solution u_dmd using only this eigenvalue
% and eigenvector
% Save the smallest (in modulus) eigenvalue as A2
% Save the 339th column of u_dmd as A3

[eigV, eigD] = eig(sTilde);
dt = 1/29.97;
mu = diag(eigD);
omega = log(mu)/dt;
[~, minIdx] = min(abs(omega));
minEig = omega(minIdx);
Phi = U * eigV;

y0 = Phi\X1(:,1);
t = 0:dt:675*dt;
u_modes = zeros(length(y0),length(t));
for iter = 1:length(t)
   u_modes(:,iter) = y0.*exp(omega*t(iter)); 
end
u_dmd = Phi*u_modes;

A2 = minEig; % scalar
A3 = u_dmd(:, 339); % 100368x1 double

% Truncate u_dmd to the number of frames in data
% Subtract u_dmd from data, this will be the foreground video
% The modulus of u_dmd will be the background video data
% The modulus of after the subtraction will be the foreground video data
% Save the 338th column of background as A4
% Save the 339th column of foreground as A5

u_dmd = u_dmd(:, 675);
foreground = data - u_dmd;
foreground = abs(foreground);

%A4 = background(:, 338); % 100368x1 double
A5 = foreground(:, 339); % 100368x1 double

% After you're done submitting to gradescope, change A4 and A5 to the full
% background and foreground matrices in order for it to work with MakeVid.m

